#!/usr/bin/env python3
import argparse
import collections

import mwbot
import vowi

class LVADaten:
	NAME = 'LVA-Daten'
	CATEGORY = 'LVAs'
	NAMESPACES = vowi.UNI_NAMESPACES
	MIN = 1
	MAX = 1
	PARAMS = set((
		'abteilung',
		'alias',
		'ects',
		'homepage',
		'sprache',
		'id',
		'vortragende',
		'wann',
		'zuordnungen'
	))

class Zuordnung:
	NAME = 'Zuordnung'
	PARAMS = set((
		'1',
		'2',
		'wahl'
	))

class AbteilungDaten:
	NAME = 'Abteilung-Daten'
	CATEGORY = 'Abteilungen'
	MIN = 1
	MAX = 1
	PARAMS = set((
		'abkürzung',
		'ehemalige ids',
		'gehört zu',
		'homepage',
		'id',
		'logo',
		'namensraum',
		'text',
		'typ',
		'veraltet'
	))

class KatalogDaten:
	NAME = 'Katalog-Daten'
	CATEGORY = 'Kataloge'
	MIN = 1
	MAX = 1
	PARAMS = set((
		'1',
		'legacy',
		'plan',
		'text',
		'tiss',
		'veraltet'
	))

class Beispiel:
	NAME = 'Beispiel'
	CATEGORY = 'Beispiele'
	MIN = 1
	MAX = 1
	PARAMS = set((
	'1',
	'status',
	'teils'
	))

def check_template(code, spec):
	templates = code.filter_templates(matches= lambda x: x.name.matches(spec.NAME))
	if hasattr(spec, 'MIN') and len(templates) < spec.MIN:
		yield 'less than {} of the {} template'.format(spec.MIN, spec.NAME)
	if hasattr(spec, 'MAX') and len(templates) < spec.MAX:
		yield 'more than {} of the {} template'.format(spec.MAX, spec.NAME)
	for template in templates:
		unknowns = set([str(p.name).strip() for p in template.params])- spec.PARAMS
		for unknown in unknowns:
			yield 'unknown parameter for template {}: <code><nowiki>{}</nowiki></code>'.format(spec.NAME, str(template.get(unknown)).strip())


def generate_section(name, errors):
	section = '== {} ==\n'.format(name)
	if len(errors) == 0:
		return section + 'No errors found.\n'
	for page in sorted(errors):
		section += '# [[{}]]\n'.format(page)
		for error in sorted(errors[page]):
			section += '#* {}\n'.format(error)
	return section

def catmembers_with_revs(category, **kwargs):
	return site.results(generator='categorymembers', gcmtitle='Category:{}'.format(category),
		prop='revisions', rvprop='content', gcmlimit='max', **kwargs)

def check_category(tplclass, *additional_classes):
	errors = collections.defaultdict(list)
	kwargs = {}
	if hasattr(tplclass, 'NAMESPACES'):
		kwargs['gcmnamespace'] = mwbot.join(tplclass.NAMESPACES)
	for page in catmembers_with_revs(tplclass.CATEGORY, **kwargs):
		code = mwbot.parse(page['revisions'][0]['*'])
		for error in check_template(code, tplclass):
			errors[page['title']].append(error)
		for ac in additional_classes:
			for error in check_template(code, ac):
				errors[page['title']].append(error)
	return generate_section(tplclass.CATEGORY, errors)

if __name__ == '__main__':
	parser = mwbot.get_argparser()
	args = parser.parse_args()

	site = mwbot.getsite('report.py', args)
	report = '{{Sonstiges Leiste}}\nGenerated by ~~~~\n'
	report += check_category(LVADaten, Zuordnung)
	report += check_category(AbteilungDaten)
	report += check_category(KatalogDaten)
	report += check_category(Beispiel)
	mwbot.save(site, 'VoWi:Report', None, report, 'update')
